@page "/orders"
@rendermode InteractiveServer
@using Newtonsoft.Json
@inject IHttpClientFactory ClientFactory
@inject OrderService OrderService
@using GoodsApi.Data.Entities
@inject SessionService SessionService
@inject CartService CartService
<h1>Your Order</h1>

<div class="spinner-container" style="display: @(isLoading ? "flex" : "none")">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@if (Orders == null || !Orders.Any())
{
    <p>Заказов не найдено.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Товар</th>
                    <th>Описание</th>
                    <th>Количество</th>
                    <th>Действия</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Orders)
                {
                    <tr>
                        <td>
                            <a href="/orders/@order.Id">
                                <h4>Заказ №@order.Id</h4>
                            </a>
                        </td>
                        <td>
                            <h4>@order.OrderDate</h4>
                        </td>
                        <td>
                            <h4>@order.Items.Sum(i => i.Quantity)</h4>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="()=>ClearOrder(order.Id)">Удалить заказ</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private IEnumerable<Order>? Orders = Array.Empty<Order>();
    private bool isLoading = true;

    protected async Task LoadOrder()
    {
        isLoading = true;
        Orders = await OrderService.GetOrdersAsync();
        foreach (var order in Orders)
        {
            var items = await OrderService.GetOrderItemsAsync(order.Id);
            order.Items = items.ToList();
        }
        isLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool a)
    {
        if (a) await LoadOrder();
    }

    private void OnRolesUpdated()
    {
        _ = InvokeAsync(LoadOrder);
    }

    private async Task ClearOrder(long orderId)
    {
        await OrderService.DeleteOrderAsync(orderId);
        await LoadOrder();
    }
}
